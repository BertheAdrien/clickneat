name: CI

on: [push]

jobs:
  deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:

    - name: Deploy to Server
      uses: appleboy/ssh-action@v0.1.10
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        script: |
          # Créer un script de déploiement
          cat > /tmp/deploy.sh << 'EOL'
          #!/bin/bash
          set -e
          
          PROJECT_DIR="${{ secrets.PROJECT_PATH }}"
          cd $PROJECT_DIR
          
          # Corriger les permissions du dossier .git et du projet entier
          sudo chown -R $(whoami):$(whoami) .

          # Artisan commands
          sudo -u www-data php artisan config:clear
          sudo -u www-data php artisan route:clear
          sudo -u www-data php artisan view:clear
          sudo -u www-data php artisan cache:clear

          # Vérifier que la table 'cache' existe sinon l'exécuter
          if ! mysql -u root -e "USE clickneat; SHOW TABLES LIKE 'cache';" | grep -q 'cache'; then
            echo "➡️ Migration de la table 'cache' nécessaire."
            sudo -u www-data php artisan migrate --path=$(find database/migrations -name '*create_cache_table.php') --force
          else
            echo "✅ Table 'cache' déjà existante."
          fi

          sudo -u www-data php artisan config:cache
          sudo -u www-data php artisan route:cache
          sudo -u www-data php artisan migrate --force
          
          # Maintenant nous pouvons utiliser git
          git stash
          git reset --hard
          git pull
          
          # Créer les dossiers nécessaires s'ils n'existent pas
          mkdir -p vendor
          mkdir -p bootstrap/cache
          mkdir -p storage/logs
          mkdir -p storage/framework/cache
          mkdir -p storage/framework/sessions
          mkdir -p storage/framework/views
          
          # Installer composer si nécessaire
          if ! [ -x "$(command -v composer)" ]; then
            curl -sS https://getcomposer.org/installer | php
            sudo mv composer.phar /usr/local/bin/composer
          fi
          
          # Installer les dépendances
          composer install --no-dev --optimize-autoloader
          
          # Corriger les permissions pour le serveur web
          sudo chown -R www-data:www-data .
          sudo chmod -R 775 storage bootstrap/cache vendor
          
          # Assurer que les scripts artisan sont exécutables
          sudo chmod +x artisan
          
          # Exécuter les commandes Laravel avec le bon utilisateur
          sudo -u www-data php artisan config:clear
          sudo -u www-data php artisan route:clear
          sudo -u www-data php artisan view:clear
          sudo -u www-data php artisan cache:clear
          sudo -u www-data php artisan config:cache
          sudo -u www-data php artisan route:cache
          sudo -u www-data php artisan migrate --force
          EOL
          
          # Rendre le script exécutable
          chmod +x /tmp/deploy.sh
          
          # Exécuter le script
          sudo /tmp/deploy.sh